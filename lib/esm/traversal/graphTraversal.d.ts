import Graph from "graphology";
import { EdgeKey, NodeKey } from "graphology-types";
import { Step } from "../step/generic";
import { GraphConfiguration, Traverser, Vertex, Edge, Object } from "../type";
export declare class GraphTraversal<S, E> implements Iterator<Traverser<E>> {
    private graph;
    private config;
    private steps;
    private start;
    private target;
    constructor(graph: Graph, config: GraphConfiguration, start: Iterator<Traverser<S>>, steps?: Array<Step<any, any>>);
    next(): IteratorResult<Traverser<E>>;
    addStep<T>(step: Step<unknown, T>): GraphTraversal<S, T>;
    getGraph(): Graph;
    getConfig(): GraphConfiguration;
    private getTarget;
    hasId(...keys: Array<EdgeKey> | Array<NodeKey>): GraphTraversal<S, Vertex | Edge>;
    hasKey(...keys: Array<string>): GraphTraversal<S, Edge | Vertex | Object>;
    hasLabel(...labels: Array<string>): GraphTraversal<S, Vertex | Edge>;
    hasNot(...keys: Array<string>): GraphTraversal<S, Edge | Vertex | Object>;
    properties(...properties: Array<string>): GraphTraversal<S, Object>;
    identity(): GraphTraversal<S, NodeKey | EdgeKey>;
    count(): GraphTraversal<S, number>;
    fold(): GraphTraversal<S, Array<E>>;
    otherV(): GraphTraversal<S, Vertex>;
    both(...labels: Array<string>): GraphTraversal<S, Vertex>;
    bothE(...labels: Array<string>): GraphTraversal<S, Edge>;
    bothV(): GraphTraversal<S, Vertex>;
    in(...labels: Array<string>): GraphTraversal<S, Vertex>;
    inE(...labels: Array<string>): GraphTraversal<S, Edge>;
    inV(): GraphTraversal<S, Vertex>;
    out(...labels: Array<string>): GraphTraversal<S, Vertex>;
    outE(...labels: Array<string>): GraphTraversal<S, Edge>;
    outV(): GraphTraversal<S, Vertex>;
    toList(): Array<E>;
    toSet(): Set<E>;
    explain(): void;
}
