{"version":3,"sources":["webpack://graphology-gremlin/webpack/universalModuleDefinition","webpack://graphology-gremlin/./src/traversal/graphTraversalSource.ts","webpack://graphology-gremlin/./src/type/index.ts","webpack://graphology-gremlin/./src/type/edge.ts","webpack://graphology-gremlin/./src/type/vertex.ts","webpack://graphology-gremlin/./src/type/path.ts","webpack://graphology-gremlin/./src/type/traverser.ts","webpack://graphology-gremlin/./src/type/graphConfiguration.ts","webpack://graphology-gremlin/./src/traversal/graphTraversal.ts","webpack://graphology-gremlin/./src/step/filter/hasLabel.ts","webpack://graphology-gremlin/./src/step/filter/generic.ts","webpack://graphology-gremlin/./src/step/generic.ts","webpack://graphology-gremlin/./src/step/start/addE.ts","webpack://graphology-gremlin/./src/step/map/generic.ts","webpack://graphology-gremlin/./src/step/start/addV.ts","webpack://graphology-gremlin/./src/step/start/E.ts","webpack://graphology-gremlin/./src/step/start/V.ts","webpack://graphology-gremlin/webpack/bootstrap","webpack://graphology-gremlin/./src/index.ts"],"names":[],"mappings":"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","file":"graphology-gremlin.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"graphology-gremlin\"] = factory();\n\telse\n\t\troot[\"graphology-gremlin\"] = factory();\n})(this, function() {\nreturn ","import Graph from \"graphology\";\nimport { NodeKey, EdgeKey } from \"graphology-types\";\nimport { Traverser, Vertex, Edge, GraphConfiguration, DEFAULT_GRAPH_CONFIGURATION } from \"../type\";\nimport { GraphTraversal } from \"./graphTraversal\";\n// start steps\nimport { AddEStep } from \"../step/start/addE\";\nimport { AddVStep } from \"../step/start/addV\";\nimport { EStep } from \"../step/start/E\";\nimport { VStep } from \"../step/start/V\";\n\n/**\n * Extract of https://github.com/apache/tinkerpop/blob/master/gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/TraversalSource.java\n *\n * A {@code TraversalSource} is used to create {@link Traversal} instances.\n * A traversal source can generate any number of {@link Traversal} instances.\n * A traversal source is primarily composed of a {@link Graph} and a {@link TraversalStrategies}.\n * Various {@code withXXX}-based methods are used to configure the traversal strategies (called \"configurations\").\n * Various other methods (dependent on the traversal source type) will then generate a traversal given the graph and configured strategies (called \"spawns\").\n * A traversal source is immutable in that fluent chaining of configurations create new traversal sources.\n * This is unlike {@link Traversal} and {@link GraphComputer}, where chained methods configure the same instance.\n * Every traversal source implementation must maintain two constructors to enable proper reflection-based construction.\n * <p/>\n * {@code TraversalSource(Graph)} and {@code TraversalSource(Graph,TraversalStrategies)}\n *\n * @author Marko A. Rodriguez (http://markorodriguez.com)\n * @author Stephen Mallette (http://stephen.genoprime.com)\n */\nexport class GraphTraversalSource {\n  private graph: Graph;\n  private config: GraphConfiguration = DEFAULT_GRAPH_CONFIGURATION;\n\n  constructor(graph: Graph) {\n    this.graph = graph;\n  }\n\n  with(key: keyof GraphConfiguration, value: string): this {\n    this.config[key] = value;\n    return this;\n  }\n\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  // ~ Start steps\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  // Those steps are executed directly and result are passed to the traversal\n  // constructor for its start\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n  /**\n   * List all vertex of the graph or a selection.\n   */\n  public V<E>(...ids: Array<NodeKey>): GraphTraversal<NodeKey, Vertex> {\n    const gt = new GraphTraversal<NodeKey, Vertex>(this.graph, this.config);\n    gt.addStep(new VStep(gt));\n    const nodes = (ids.length > 0 ? ids : this.graph.nodes()).map((id: NodeKey) => new Traverser(id));\n    gt.addStart(nodes[Symbol.iterator]());\n    return gt;\n  }\n\n  /**\n   * Create a new vertex.\n   */\n  public addV<E>(): GraphTraversal<null, Vertex> {\n    const gt = new GraphTraversal<null, Vertex>(this.graph, this.config);\n    gt.addStep(new AddVStep(gt));\n    const iteratorArray = [null];\n    gt.addStart(iteratorArray[Symbol.iterator]());\n    return gt;\n  }\n\n  /**\n   * List all edges of the graph or a selection.\n   */\n  public E<E>(...ids: Array<EdgeKey>): GraphTraversal<EdgeKey, Edge> {\n    const gt = new GraphTraversal<EdgeKey, Edge>(this.graph, this.config);\n    gt.addStep(new EStep(gt));\n    const edges = (ids.length > 0 ? ids : this.graph.edges()).map((id: EdgeKey) => new Traverser(id));\n    gt.addStart(edges[Symbol.iterator]());\n    return gt;\n  }\n\n  /**\n   * Create a new edge.\n   */\n  public addE<E>(): GraphTraversal<null, Edge> {\n    const gt = new GraphTraversal<null, Edge>(this.graph, this.config);\n    gt.addStep(new AddEStep(gt));\n    const iteratorArray = [null];\n    gt.addStart(iteratorArray[Symbol.iterator]());\n    return gt;\n  }\n\n  public inject(): GraphTraversal<any, any> {\n    throw new Error(\"Not implemented\");\n  }\n}\n","import { Edge } from \"./edge\";\nimport { Vertex } from \"./vertex\";\nimport { Path, PathSegment } from \"./path\";\nimport { Traverser } from \"./traverser\";\nimport { GraphConfiguration, DEFAULT_GRAPH_CONFIGURATION } from \"./graphConfiguration\";\n\nexport { Edge, Vertex, Path, PathSegment, Traverser, GraphConfiguration, DEFAULT_GRAPH_CONFIGURATION };\n","import { EdgeKey } from \"graphology-types\";\n\n// Lazy ?\n// Give the graph internally + some config for the edge type ?\n// What to do for creation ?\nexport class Edge {\n  id: EdgeKey | null = null;\n\n  constructor(id?: EdgeKey) {\n    if (id) this.id = id;\n  }\n}\n","import { NodeKey } from \"graphology-types\";\n\n// Lazy ?\n// Give the graph internally + some config for node labels ?\n// What to do for creation ?\nexport class Vertex {\n  id: NodeKey;\n  labels: Array<string>;\n  properties: { [key: string]: unknown };\n\n  constructor(id: NodeKey, labels: Array<string> = [], properties: { [key: string]: unknown } = {}) {\n    this.id = id;\n    this.labels = labels;\n    this.properties = properties;\n  }\n}\n","import { Vertex } from \"./vertex\";\nimport { Edge } from \"./edge\";\n\nexport interface PathSegment {\n  source: Vertex;\n  edge: Edge;\n  target: Vertex;\n}\n\nexport class Path {\n  source: Vertex;\n  target: Vertex | null;\n  segments: Array<PathSegment> = [];\n\n  constructor(path: Array<PathSegment> | Vertex) {\n    if (path instanceof Vertex) {\n      this.source = path;\n    } else {\n      if (path.length === 0) throw new Error(\"Can't build a path with an empty array\");\n      this.segments = path;\n      this.source = this.segments[0].source;\n      this.target = this.segments[this.segments.length - 1].target;\n    }\n  }\n}\n","/**\n * Extract of https://github.com/apache/tinkerpop/blob/master/gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/Traverser.java\n *\n * A {@code Traverser} represents the current state of an object flowing through a {@link Traversal}.\n * A traverser maintains a reference to the current object, a traverser-local \"sack\", a traversal-global sideEffect,\n * a bulk count, and a path history.\n * <p/>\n * Different types of traversers can exist depending on the semantics of the traversal and the desire for\n * space/time optimizations of the developer.\n */\nexport class Traverser<S> {\n  /**\n   * The inner value of the traverser.\n   */\n  value: S;\n  /**\n   * Traverser path, ie. the value of each previous steps with their name\n   */\n  path: Array<{ label: string; value: any }>;\n\n  /**\n   * Default constructor.\n   */\n  constructor(value: S, path?: Array<any>) {\n    this.value = value;\n    if (path) this.path = path;\n  }\n\n  /**\n   * Return the value of the traverser.\n   */\n  get(): S {\n    return this.value;\n  }\n\n  /**\n   * Return the path of the traverser.\n   */\n  getPath(): Array<any> {\n    return this.path;\n  }\n\n  /**\n   * Create a new traverser for the next iteration.\n   */\n  makeNextTraverser<T>(label: string, value: T) {\n    const copyPath = [].concat(this.path);\n    copyPath.push({ label, value });\n    return new Traverser<T>(value, copyPath);\n  }\n\n  // loops();\n  // bulk();\n  // sack();\n  // sideEffects(arg?: string);\n}\n","export interface GraphConfiguration {\n  vertex_label_field: string;\n  edge_label_field: string;\n}\n\n//TODO add a method to create a node id.\nexport const DEFAULT_GRAPH_CONFIGURATION: GraphConfiguration = {\n  vertex_label_field: \"@labels\",\n  edge_label_field: \"@type\",\n};\n","import Graph from \"graphology\";\nimport { Step, StepConstructor } from \"../step/generic\";\nimport { GraphConfiguration, Traverser } from \"../type\";\n// filter step\nimport { HasLabelStep } from \"../step/filter/hasLabel\";\n\n/**\n * Extract from https://github.com/apache/tinkerpop/blob/master/gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/Traversal.java\n *\n * A {@link Traversal} represents a directed walk over a {@link Graph}.\n * This is the base interface for all traversal's, where each extending interface is seen as a domain specific language.\n * For example, {@link GraphTraversal} is a domain specific language for traversing a graph using \"graph concepts\" (e.g. vertices, edges).\n * Another example may represent the graph using \"social concepts\" (e.g. people, cities, artifacts).\n * A {@link Traversal} is evaluated in one of two ways: iterator-based OLTP or {@link GraphComputer}-based OLAP.\n * OLTP traversals leverage an iterator and are executed within a single JVM (with data access allowed to be remote).\n * OLAP traversals leverage {@link GraphComputer} and are executed between multiple JVMs (and/or cores).\n *\n * @author Marko A. Rodriguez (http://markorodriguez.com)\n */\nexport class GraphTraversal<S, E> implements Iterator<Traverser<E>> {\n  private graph: Graph;\n  private config: GraphConfiguration;\n  private steps: Array<Step<any, any>> = [];\n  private start: Iterator<Traverser<S>>;\n  private target: Iterator<Traverser<E>> | null = null;\n\n  constructor(graph: Graph, config: GraphConfiguration) {\n    this.graph = graph;\n    this.config = config;\n  }\n\n  /**\n   * Consume the iterator result.\n   */\n  next(): IteratorResult<Traverser<E>> {\n    return this.getTarget().next();\n  }\n\n  /**\n   * Add a step to the traversal.\n   */\n  addStep(step: Step<any, any>): this {\n    this.steps.push(step);\n    return this;\n  }\n\n  /**\n   * Add a start to the traversal.\n   */\n  addStart(start: Iterator<Traverser<S>>): this {\n    this.start = start;\n    return this;\n  }\n\n  getGraph(): Graph {\n    return this.graph;\n  }\n\n  getConfig(): GraphConfiguration {\n    return this.config;\n  }\n\n  /**\n   * Return the target iterator of the traversal.\n   * The target iterator is created if it's not the case.\n   * So this function in fact execute the traversal.\n   */\n  private getTarget(): Iterator<Traverser<E>> {\n    if (this.target === null) {\n      let target: Iterator<Traverser<any>> = this.start;\n      this.steps.forEach((step: Step<any, any>) => {\n        step.addStart(target);\n        target = step;\n      });\n      this.target = target as Iterator<Traverser<E>>;\n    }\n    return this.target;\n  }\n\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  // ~ Filter steps\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  public hasLabel(label: string): this {\n    this.addStep(new HasLabelStep(this, label));\n    return this;\n  }\n\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  // ~ Terminal steps\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n  /**\n   * Give the traversal result as a list.\n   */\n  public toList(): Array<E> {\n    const result: Array<E> = [];\n    let ir = this.next();\n    while (!ir.done) {\n      result.push(ir.value);\n      ir = this.next();\n    }\n    return result;\n  }\n\n  /**\n   * Give the traversal result as a Set.\n   * TODO: need to remove duplicates by checking there footprint ???\n   */\n  public toSet(): Set<E> {\n    const result: Set<E> = new Set<E>();\n    let ir = this.next();\n    while (!ir.done) {\n      result.add(ir.value);\n      ir = this.next();\n    }\n    return result;\n  }\n\n  /**\n   * Give the explain of the traversal.\n   */\n  public explain(): void {\n    throw new Error(\"Not implemented\");\n  }\n}\n","import { Vertex, Traverser } from \"../../type\";\nimport { GraphTraversal } from \"../../traversal/graphTraversal\";\nimport { FilterStep } from \"./generic\";\n\n/**\n * Retrieve a list of edges or all graph edges.\n * Ex: g.E()\n */\nexport class HasLabelStep extends FilterStep<Vertex> {\n  /**\n   * Default constructor.\n   */\n  constructor(traversal: GraphTraversal<any, any>, label: string) {\n    super(\"hasLabel\", traversal, (traverser: Traverser<Vertex>): boolean => {\n      return traverser.value.labels.includes(label);\n    });\n  }\n}\n","import { NodeKey } from \"graphology-types\";\nimport { GraphTraversal } from \"../../traversal/graphTraversal\";\nimport { Path, Traverser, Vertex } from \"../../type\";\nimport { Step } from \"../generic\";\n\n/**\n * Retrieve a list of vertex or all graph vertex.\n * Ex: g.V()\n */\nexport class FilterStep<S> extends Step<S, S> {\n  label: string;\n  fn: (source: Traverser<S>) => boolean;\n\n  /**\n   * Default constructor.\n   */\n  constructor(label: string, traversal: GraphTraversal<S, S>, fn: (source: Traverser<S>) => boolean) {\n    super(traversal);\n    this.label = label;\n    this.fn = fn;\n  }\n\n  getLabel(): string {\n    return this.label;\n  }\n\n  next(): IteratorResult<Traverser<S>> {\n    let ir = this.start.next();\n    let nextFound = false;\n    while (!ir.done && !nextFound) {\n      nextFound = this.fn(ir.value);\n      if (!nextFound) ir = this.start.next();\n    }\n    return ir;\n  }\n}\n","import { GraphTraversal } from \"../traversal/graphTraversal\";\nimport { Traverser } from \"../type\";\n/**\n * Extract of https://github.com/apache/tinkerpop/blob/master/gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/Step.java\n *\n * A {@link Step} denotes a unit of computation within a {@link Traversal}.\n * A step takes an incoming object and yields an outgoing object.\n * Steps are chained together in a {@link Traversal} to yield a lazy function chain of computation.\n * <p/>\n * In the constructor of a Step, never store explicit sideEffect objects in {@link TraversalSideEffects}.\n * If a sideEffect needs to be registered with the {@link Traversal}, use SideEffects.registerSupplier().\n *\n * @param <S> The incoming object type of the step\n * @param <E> The outgoing object type of the step\n */\nexport abstract class Step<S, E> implements Iterator<Traverser<E>> {\n  /**\n   * Traversal of which the step behave.\n   */\n  traversal: GraphTraversal<any, any>;\n\n  /**\n   * The starts object for the step.\n   */\n  start: Iterator<Traverser<S>> | null = null;\n\n  /**\n   * Default constructor.\n   */\n  constructor(traversal: GraphTraversal<any, any>) {\n    this.traversal = traversal;\n  }\n\n  /**\n   *  Add the starts item for the step.\n   */\n  addStart(iterator: Iterator<Traverser<S>>): void {\n    this.start = iterator;\n  }\n\n  /**\n   * Get the name of the step.\n   */\n  abstract getLabel(): string;\n\n  /**\n   * Iterator next\n   */\n  abstract next(): IteratorResult<Traverser<E>>;\n}\n\nexport interface StepConstructor<T> {\n  new (traversal: GraphTraversal<any, any>): T;\n}\n","import { GraphTraversal } from \"../../traversal/graphTraversal\";\nimport { Edge } from \"../../type\";\nimport { MapStep } from \"../map/generic\";\n\nexport class AddEStep extends MapStep<null, Edge> {\n  /**\n   * Default constructor.\n   */\n  constructor(traversal: GraphTraversal<any, any>) {\n    super(\n      \"AddE\",\n      traversal,\n      (): Edge => {\n        return new Edge();\n      },\n    );\n  }\n}\n","import { NodeKey } from \"graphology-types\";\nimport { GraphTraversal } from \"../../traversal/graphTraversal\";\nimport { Path, Traverser, Vertex } from \"../../type\";\nimport { Step } from \"../generic\";\n\n/**\n * Retrieve a list of vertex or all graph vertex.\n * Ex: g.V()\n */\nexport class MapStep<S, T> extends Step<S, T> {\n  label: string;\n  fn: (source: Traverser<S>) => T;\n\n  /**\n   * Default constructor.\n   */\n  constructor(label: string, traversal: GraphTraversal<S, T>, fn: (source: Traverser<S>) => T) {\n    super(traversal);\n    this.label = label;\n    this.fn = fn;\n  }\n\n  getLabel(): string {\n    return this.label;\n  }\n\n  next(): IteratorResult<Traverser<T>> {\n    const ir = this.start.next();\n    if (ir.done) return ir;\n    else {\n      // execute the step with the map function\n      const traverser = ir.value;\n      return {\n        done: ir.done,\n        value: traverser.makeNextTraverser(this.getLabel(), this.fn(traverser)),\n      };\n    }\n  }\n}\n","import { GraphTraversal } from \"../../traversal/graphTraversal\";\nimport { Vertex } from \"../../type\";\nimport { MapStep } from \"../map/generic\";\n\nexport class AddVStep extends MapStep<null, Vertex> {\n  /**\n   * Default constructor.\n   */\n  constructor(traversal: GraphTraversal<any, any>) {\n    super(\n      \"AddV\",\n      traversal,\n      (): Vertex => {\n        const node = traversal.getGraph().addNode(new Date().getTime());\n        return new Vertex(node);\n      },\n    );\n  }\n}\n","import { EdgeKey } from \"graphology-types\";\nimport { Edge, Traverser } from \"../../type\";\nimport { GraphTraversal } from \"../../traversal/graphTraversal\";\nimport { MapStep } from \"../map/generic\";\n\n/**\n * Retrieve a list of edges or all graph edges.\n * Ex: g.E()\n */\nexport class EStep extends MapStep<EdgeKey, Edge> {\n  /**\n   * Default constructor.\n   */\n  constructor(traversal: GraphTraversal<any, any>) {\n    super(\n      \"E\",\n      traversal,\n      (traverser: Traverser<EdgeKey>): Edge => {\n        return new Edge(traverser.value);\n      },\n    );\n  }\n}\n","import { NodeKey } from \"graphology-types\";\nimport { GraphTraversal } from \"../../traversal/graphTraversal\";\nimport { Path, Traverser, Vertex } from \"../../type\";\nimport { MapStep } from \"../map/generic\";\n\n/**\n * Retrieve a list of vertex or all graph vertex.\n * Ex: g.V()\n */\nexport class VStep extends MapStep<NodeKey, Vertex> {\n  /**\n   * Default constructor.\n   */\n  constructor(traversal: GraphTraversal<any, any>) {\n    super(\n      \"V\",\n      traversal,\n      (traverser: Traverser<NodeKey>): Vertex => {\n        const id = traverser.value;\n        const props = traversal.getGraph().getNodeAttributes(id);\n        return new Vertex(id, props[traversal.getConfig().vertex_label_field] || [], props);\n      },\n    );\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { GraphTraversalSource } from \"./traversal/graphTraversalSource\";\n\nexport { GraphTraversalSource };\n"],"sourceRoot":""}